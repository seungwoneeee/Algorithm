n, m = map(int, input().split())
chap = []
for _ in range(m):
    chap.append(list(map(int,input().split())))

dp = [0] * (n + 1)  # dp[i]는 i일 동안 읽을 수 있는 최대 페이지 수
#0일부터 n일까지의 모든 상태를 표현
#0일의 상태도 포함하여 고려:페이지수 (0)
#*n을 하면 0부터 n일까지의 상태를 표현할 수 없고, n-1일까지만 표현할 수 있게 됨 -> n일 동안의 최대 페이지 수를 계산하는데 필요한 공간이 부족함
#예시: 7 7/ 3 10 /5 20/1 10/1 20/2 15/4 40/2 200
#=> dp = [0]*(7+1)=[0 0 0 0 0 0 0 0]

# 동적 계획법으로 챕터를 고려하며 최대 페이지 수 계산
for days, pages in chap:
    # 뒤에서부터 업데이트 해야 함 (이전 값을 덮어쓰지 않기 위해)
    for i in range(n, days - 1, -1):
        dp[i] = max(dp[i], dp[i - days] + pages)

#예시 chap[0]: for i in ragne(7, 3 -1, -1):
    #dp[i] = max(dp[i], dp[i - 3] + 10)

# 7일: dp[7] = max(dp[7], dp[7 - 3] + 10) = max(0, 0 + 10) = 10
# 6일: dp[6] = max(dp[6], dp[6 - 3] + 10) = max(0, 0 + 10) = 10
# 5일: dp[5] = max(dp[5], dp[5 - 3] + 10) = max(0, 0 + 10) = 10
# 4일: dp[4] = max(dp[4], dp[4 - 3] + 10) = max(0, 0 + 10) = 10
# 3일: dp[3] = max(dp[3], dp[3 - 3] + 10) = max(0, 0 + 10) = 10
#    업데이트 후 DP 테이블: [0, 0, 0, 10, 10, 10, 10, 10]

#chap[1] => for i in range(7, 5 - 1, -1):
    #dp[i] = max(dp[i], dp[i - 5] + 20)

# 7일: dp[7] = max(dp[7], dp[7 - 5] + 20) = max(10, 0 + 20) = 20
# 6일: dp[6] = max(dp[6], dp[6 - 5] + 20) = max(10, 0 + 20) = 20
# 5일: dp[5] = max(dp[5], dp[5 - 5] + 20) = max(10, 0 + 20) = 20
#업데이트 후 DP 테이블: [0, 0, 0, 10, 10, 20, 20, 20]

#chap[2] => for i in range(7, 1 - 1, -1):
    #dp[i] = max(dp[i], dp[i - 1] + 10)

# 7일: dp[7] = max(dp[7], dp[7 - 1] + 10) = max(20, 20 + 10) = 30
# 6일: dp[6] = max(dp[6], dp[6 - 1] + 10) = max(20, 20 + 10) = 30
# 5일: dp[5] = max(dp[5], dp[5 - 1] + 10) = max(20, 10 + 10) = 20
# 4일: dp[4] = max(dp[4], dp[4 - 1] + 10) = max(10, 10 + 10) = 20
# 3일: dp[3] = max(dp[3], dp[3 - 1] + 10) = max(10, 0 + 10) = 10
# 2일: dp[2] = max(dp[2], dp[2 - 1] + 10) = max(0, 0 + 10) = 10
# 1일: dp[1] = max(dp[1], dp[1 - 1] + 10) = max(0, 0 + 10) = 10
#업데이트 후 DP 테이블: [0, 10, 10, 10, 20, 20, 30, 30]

#chap[3] => for i in range(7, 1 - 1, -1):
    #dp[i] = max(dp[i], dp[i - 1] + 20)

# 7일: dp[7] = max(dp[7], dp[7 - 1] + 20) = max(30, 30 + 20) = 50
# 6일: dp[6] = max(dp[6], dp[6 - 1] + 20) = max(30, 20 + 20) = 40
# 5일: dp[5] = max(dp[5], dp[5 - 1] + 20) = max(20, 20 + 20) = 40
# 4일: dp[4] = max(dp[4], dp[4 - 1] + 20) = max(20, 10 + 20) = 30
# 3일: dp[3] = max(dp[3], dp[3 - 1] + 20) = max(10, 10 + 20) = 30
# 2일: dp[2] = max(dp[2], dp[2 - 1] + 20) = max(10, 0 + 20) = 20
# 1일: dp[1] = max(dp[1], dp[1 - 1] + 20) = max(10, 0 + 20) = 20
#업데이트 후 DP 테이블: [0, 20, 20, 30, 30, 40, 40, 50]





# N일 동안 읽을 수 있는 최대 페이지 수 출력
print(dp[n])
    
